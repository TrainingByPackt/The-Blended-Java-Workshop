package com.packt.java.chapter21;

import java.lang.ref.PhantomReference;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;

public class Exercise5 {

    public static void main(String[] args) throws InterruptedException {
        ShoppingCart shoppingCart = new ShoppingCart();

        ReferenceQueue<ShoppingCart> referenceQueue = new ReferenceQueue<>();

        PhantomReference<ShoppingCart> phantomReference = new PhantomReference<>(shoppingCart, referenceQueue);

        // Show that PhantomRef is always null
        System.out.println("ShoppingCart from reference: " + phantomReference.get());

        // Start the listener, this will clear the memory when needed!
        new Thread(new PhantomListener(phantomReference, referenceQueue)).start();

        shoppingCart = null;


        // Fill 'er up!
        for (int i = 0; i < 1000; i++) {
            int[] garbage = new int[1_000_000];
        }

    }

    private static class PhantomListener implements Runnable {

        boolean keepPolling = true;

        PhantomReference<ShoppingCart> reference;
        ReferenceQueue referenceQueue;

        public PhantomListener(PhantomReference<ShoppingCart> reference, ReferenceQueue referenceQueue) {
            this.reference = reference;
            this.referenceQueue = referenceQueue;
        }

        @Override
        public void run() {
            while(!reference.isEnqueued()) {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            System.out.println("Memory ready for collection!");
            Reference reference = referenceQueue.poll();
            reference.clear();
        }
    }
}
